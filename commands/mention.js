const fs = require('fs');
const path = require('path');
const { format } = require('date-fns');
const { ptBR } = require('date-fns/locale');

const filePath = path.join(__dirname, '..', 'data', 'links.json');

module.exports = {
    name: 'mention',
    description: 'Faz um mix de 10 mÃºsicas armazenadas na biblioteca',
    async execute(message, client) {
        if (!fs.existsSync(filePath)) {
            return message.reply('Nenhuma mÃºsica foi salva ainda. ðŸ˜•');
        }

        let links = [];

        try {
            const data = fs.readFileSync(filePath, 'utf8');
            links = JSON.parse(data);
            if (!Array.isArray(links) || links.length === 0) {
                return message.reply('A biblioteca de mÃºsicas estÃ¡ vazia! ðŸŽ¶');
            }
        } catch (error) {
            console.error(`Erro ao ler o arquivo JSON: ${error}`);
            return message.reply('Erro ao acessar a biblioteca de mÃºsicas. ðŸš¨');
        }

        // Embaralhar os links para melhor aleatoriedade
        const shuffleArray = (array) => array.sort(() => Math.random() - 0.5);
        const shuffledLinks = shuffleArray(links).slice(0, 10); // Pega 10 mÃºsicas aleatÃ³rias

        for (const { link, user, date, NAME, ARTIST } of shuffledLinks) {
            if (!link) continue; // Pula se o link for invÃ¡lido

            const formattedDate = format(new Date(date), "dd 'de' MMMM 'de' yyyy 'Ã s' HH:mm:ss", { locale: ptBR });

            try {
                await client.commands.get('play-link').execute(message, client, [link]);

                const responseMessage = `ðŸŽµ **Tocando mÃºsica aleatÃ³ria:**  
ðŸŽ¶ **${NAME}** - *${ARTIST}*  
ðŸ”— [Ouvir agora](${link})  

ðŸ‘¤ **Escolhido por:** ${user}  
ðŸ“… **Adicionado em:** ${formattedDate}`;
                
                await message.reply(responseMessage); // Agora responde diretamente ao usuÃ¡rio

                console.log(`ðŸŽµ Tocando: ${NAME} - ${ARTIST} | Adicionado por ${user} em ${formattedDate}`);
            } catch (error) {
                console.error(`Erro ao executar o comando play-link: ${error}`);
            }
        }
    },
};
